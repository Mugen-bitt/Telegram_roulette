import React, { useState, useEffect } from 'react';
import WebApp from '@twa-dev/sdk';

const App = () => {
  const [result, setResult] = useState(null);
  const [isSpinning, setIsSpinning] = useState(false);
  const [actions] = useState([
    "–ü–æ–π—Ç–∏ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª",
    "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–µ–≤—É—à–∫–æ–π",
    "–°—ã–≥—Ä–∞—Ç—å –≤ CS2 —Å –¥—Ä—É–∑—å—è–º–∏",
    "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É",
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º",
    "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É",
    "–ù–∞—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É"
  ]);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    WebApp.ready();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–º–æ–π Telegram
    document.body.style.backgroundColor = WebApp.backgroundColor;
  }, []);

  const spinWheel = () => {
    if (isSpinning) return;
    
    setIsSpinning(true);
    setResult(null);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    const spinDuration = 2000 + Math.random() * 1000;
    
    setTimeout(() => {
      const randomIndex = Math.floor(Math.random() * actions.length);
      setResult(actions[randomIndex]);
      setIsSpinning(false);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      WebApp.showPopup({
        message: `–í–∞—à –≤—ã–±–æ—Ä: ${actions[randomIndex]}`,
        buttons: [{
          type: 'ok',
          text: '–°—É–ø–µ—Ä!'
        }]
      });
    }, spinDuration);
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4">
      <h1 className="text-2xl font-bold mb-8">–†—É–ª–µ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞</h1>
      
      <div className={`relative w-64 h-64 mb-8 ${isSpinning ? 'animate-pulse' : ''}`}>
        <div className="absolute inset-0 border-4 border-blue-500 rounded-full flex items-center justify-center">
          {isSpinning ? (
            <div className="text-xl">üé≤</div>
          ) : (
            result && <p className="text-lg font-semibold p-4 text-center">{result}</p>
          )}
        </div>
      </div>
      
      <button
        onClick={spinWheel}
        disabled={isSpinning}
        className={`
          px-6 py-3 rounded-lg font-bold text-white
          ${isSpinning 
            ? 'bg-gray-400 cursor-not-allowed' 
            : 'bg-blue-500 hover:bg-blue-600 active:bg-blue-700'}
          transition-colors duration-200
        `}
      >
        {isSpinning ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : '–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É'}
      </button>

      {result && !isSpinning && (
        <div className="mt-8 text-center">
          <h2 className="text-xl font-semibold">–í–∞—à –≤—ã–±–æ—Ä:</h2>
          <p className="text-2xl font-bold text-blue-500 mt-2">{result}</p>
        </div>
      )}
    </div>
  );
};

export default App;
